import os
import random
import streamlit as st
from dotenv import load_dotenv
from datetime import datetime, date
from openai import OpenAI
from transformers import AutoTokenizer, AutoConfig, AutoModelForSequenceClassification
import torch
import torch.nn.functional as F
import plotly.graph_objects as go
import pandas as pd
from reportlab.lib import colors
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib.enums import TA_CENTER
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
import io

# --- 1. ÌéòÏù¥ÏßÄ ÏÑ§Ï†ï Î∞è Ïª§Ïä§ÌÖÄ CSS ---
st.set_page_config(page_title="ÎßàÏùåÏù¥ - AI Í∞êÏ†ï ÏùºÍ∏∞", page_icon="üíù", layout="wide")

st.markdown("""
<style>
    .stApp { background: #fafbfc; }
    .main .block-container { max-width: 1200px; padding: 2rem 3rem; }
    [data-testid="stSidebar"] { background: linear-gradient(180deg, #6366f1 0%, #8b5cf6 100%); padding-top: 2rem; }
    [data-testid="stSidebar"] * { color: white !important; }
    [data-testid="stSidebar"] .stRadio label { font-size: 1.1rem; font-weight: 500; padding: 0.75rem 1rem; border-radius: 10px; transition: all 0.3s ease; display: block; margin: 0.5rem 0; }
    [data-testid="stSidebar"] .stRadio label:hover { background: rgba(255,255,255,0.1); }
    [data-testid="stSidebar"] [data-baseweb="radio"] { background-color: rgba(255,255,255,0.2) !important; }
    .main-header { background: white; padding: 2rem; border-radius: 20px; text-align: center; margin-bottom: 2rem; box-shadow: 0 4px 20px rgba(0,0,0,0.08); }
    .main-header h1 { color: #6366f1; margin: 0; font-size: 2.5rem; font-weight: 700; }
    .main-header p { color: #64748b; margin: 0.5rem 0 0 0; font-size: 1.1rem; }
    .chat-wrapper { background: white; border-radius: 20px; padding: 2rem; box-shadow: 0 4px 12px rgba(0,0,0,0.08); height: 600px; display: flex; flex-direction: column; }
    .chat-messages { flex: 1; overflow-y: auto; padding-right: 1rem; margin-bottom: 1rem; }
    .metric-card { background: white; border-radius: 12px; padding: 1.5rem; text-align: center; box-shadow: 0 4px 12px rgba(0,0,0,0.08); height: 100%; }
    .metric-value { font-size: 2.5rem; font-weight: 700; margin: 0.5rem 0; }
    .metric-label { color: #64748b; font-size: 0.9rem; }
    .question-box { background: linear-gradient(135deg, #e0e7ff 0%, #c7d2fe 100%); border-radius: 16px; padding: 1.5rem; margin-bottom: 1.5rem; text-align: center; }
    .question-text { color: #4c1d95; font-size: 1.3rem; font-weight: 600; margin: 0; }
    .stButton > button { background: #6366f1; color: white; border: none; border-radius: 10px; padding: 0.6rem 1.5rem; font-weight: 600; transition: all 0.2s ease; width: 100%; }
    .stButton > button:hover { background: #4f46e5; transform: translateY(-1px); }
    .emotion-tag { display: inline-block; padding: 0.4rem 0.8rem; border-radius: 20px; font-size: 0.85rem; font-weight: 600; margin: 0.2rem; }
    .tag-positive { background: #d1fae5; color: #065f46; }
    .tag-negative { background: #fee2e2; color: #991b1b; }
    ::-webkit-scrollbar { width: 8px; height: 8px; }
    ::-webkit-scrollbar-track { background: #f1f1f1; border-radius: 10px; }
    ::-webkit-scrollbar-thumb { background: #cbd5e1; border-radius: 10px; }
    ::-webkit-scrollbar-thumb:hover { background: #94a3b8; }
    .auth-container { max-width: 400px; margin: 4rem auto; background: white; border-radius: 20px; padding: 3rem; box-shadow: 0 10px 30px rgba(0,0,0,0.1); text-align: center; }
    [data-testid="stTabs"] { display: none; }
</style>
""", unsafe_allow_html=True)

# --- 2. ÌôòÍ≤Ω Î≥ÄÏàò Î∞è API Î°úÎìú ---
load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
PARENT_CODE = os.getenv("PARENT_CODE", "1234")
client = OpenAI(api_key=OPENAI_API_KEY)

import os

# --- 3. RAG Î¨∏ÏÑú Ï†ÄÏû•ÏÜå ---
# Í∏∞Î≥∏ RAG Î¨∏ÏÑú
EMOTION_GUIDANCE_DOCS = {
    "positive_reinforcement": "Í∏çÏ†ïÏ†Å Í∞êÏ†ï Í∞ïÌôî Í∞ÄÏù¥Îìú: ÏïÑÏù¥Í∞Ä Í∏çÏ†ïÏ†ÅÏù∏ Í∞êÏ†ïÏùÑ ÌëúÌòÑÌñàÏùÑ ÎïåÎäî Íµ¨Ï≤¥Ï†ÅÏúºÎ°ú Ïπ≠Ï∞¨Ìï¥Ï£ºÏÑ∏Ïöî. 'Ï†ïÎßê ÏûòÌñàÎÑ§!', 'ÎÑ§Í∞Ä ÌñâÎ≥µÌï¥ÌïòÎãà ÎÇòÎèÑ Í∏∞Îªê' Í∞ôÏùÄ Í≥µÍ∞ê ÌëúÌòÑ ÏÇ¨Ïö©. Í∏çÏ†ïÏ†Å Í≤ΩÌóòÏùÑ Îçî ÏûêÏÑ∏Ìûà Ïù¥ÏïºÍ∏∞ÌïòÎèÑÎ°ù Í≤©Î†§. Í∞êÏ†ïÏùÑ ÌëúÌòÑÌïú Í≤É ÏûêÏ≤¥Î•º Ïπ≠Ï∞¨.",
    "negative_support": "Î∂ÄÏ†ïÏ†Å Í∞êÏ†ï ÏßÄÏõê Í∞ÄÏù¥Îìú: Î®ºÏ†Ä ÏïÑÏù¥Ïùò Í∞êÏ†ïÏùÑ Ïù∏Ï†ïÌïòÍ≥† Í≥µÍ∞êÌï¥Ï£ºÏÑ∏Ïöî. 'ÎßéÏù¥ ÏÜçÏÉÅÌñàÍ≤†Íµ¨ÎÇò', 'ÌûòÎì§ÏóàÍ≤†ÎÑ§' Í∞ôÏùÄ ÌëúÌòÑ ÏÇ¨Ïö©. Ìï¥Í≤∞Ï±ÖÏùÑ Î∞îÎ°ú Ï†úÏãúÌïòÍ∏∞Î≥¥Îã§ Ï∂©Î∂ÑÌûà Îì§Ïñ¥Ï£ºÍ∏∞. ÏïàÏ†ÑÌïòÍ≥† Ìé∏ÏïàÌïú Î∂ÑÏúÑÍ∏∞ Ï°∞ÏÑ±.",
    "conversation_tips": "Ìö®Í≥ºÏ†ÅÏù∏ ÎåÄÌôî ÌåÅ: ÎààÎÜíÏù¥Î•º ÎßûÏ∂îÍ≥† ÎåÄÌôîÌïòÍ∏∞. Ïó¥Î¶∞ ÏßàÎ¨∏ÏúºÎ°ú ÎåÄÌôî Ïù¥Ïñ¥Í∞ÄÍ∏∞. ÌåêÎã®ÌïòÏßÄ ÏïäÍ≥† Í≤ΩÏ≤≠ÌïòÍ∏∞. ÏïÑÏù¥Ïùò ÏÜçÎèÑÏóê ÎßûÏ∂∞ ÎåÄÌôîÌïòÍ∏∞.",
    "emotional_development": "Í∞êÏ†ï Î∞úÎã¨ Ïù¥Ìï¥: Ïó∞Î†πÎ≥Ñ Í∞êÏ†ï ÌëúÌòÑÏùò Ï∞®Ïù¥ Ïù¥Ìï¥ÌïòÍ∏∞. Í∞êÏ†ï Ïñ¥ÌúòÎ•º ÌôïÏû•ÏãúÏºúÏ£ºÍ∏∞. Îã§ÏñëÌïú Í∞êÏ†ïÏùÑ Ïù∏Ï†ïÌïòÍ≥† ÏàòÏö©ÌïòÍ∏∞. Í∞êÏ†ï Ï°∞Ï†à Î∞©Î≤ïÏùÑ Ìï®Íªò Ï∞æÏïÑÍ∞ÄÍ∏∞."
}

# rag Ìè¥ÎçîÏóêÏÑú Î¨∏ÏÑú Î°úÎìú
rag_folder = r"C:\Users\lemon\Desktop\AID\streamlit\rag"
if os.path.exists(rag_folder) and os.path.isdir(rag_folder):
    for filename in os.listdir(rag_folder):
        if filename.endswith(".txt"):  # ÌÖçÏä§Ìä∏ ÌååÏùºÎßå Ï≤òÎ¶¨
            file_path = os.path.join(rag_folder, filename)
            with open(file_path, 'r', encoding='utf-8') as file:
                key = os.path.splitext(filename)[0]  # ÌååÏùº Ïù¥Î¶ÑÏóêÏÑú ÌôïÏû•Ïûê Ï†úÍ±∞ÌïòÏó¨ ÌÇ§Î°ú ÏÇ¨Ïö©
                EMOTION_GUIDANCE_DOCS[key] = file.read().strip()

# Í≤∞Í≥º ÌôïÏù∏ (ÎîîÎ≤ÑÍπÖÏö©, ÌïÑÏöî Ïãú Ï†úÍ±∞)
# print(EMOTION_GUIDANCE_DOCS)

# --- 4. Ïò§ÎäòÏùò ÏßàÎ¨∏ ---
@st.cache_data
def get_questions():
    return [
        "Ïò§Îäò Í∞ÄÏû• Í∏∞Îª§Îçò ÏàúÍ∞ÑÏùÄ Ïñ∏Ï†úÏòÄÏñ¥? üòä",
        "Ïò§Îäò ÎàÑÍµ∞Í∞ÄÏóêÍ≤å Í≥†ÎßàÏõÄÏùÑ ÎäêÍºàÎãà? üíù",
        "Ïò§Îäò ÏÉàÎ°≠Í≤å Î∞∞Ïö¥ Í≤ÉÏù¥ ÏûàÎã§Î©¥ Î≠êÏïº? üìö",
        "Ïò§Îäò ÏπúÍµ¨ÏôÄ Ïñ¥Îñ§ Ïù¥ÏïºÍ∏∞Î•º ÎÇòÎà¥Ïñ¥? üë´",
        "Ïò§Îäò ÌïòÎ£®Î•º ÏÉâÍπîÎ°ú ÌëúÌòÑÌïúÎã§Î©¥ Î¨¥Ïä® ÏÉâÏùºÍπå? üé®",
        "Ïò§Îäò Í∞ÄÏû• Ïû¨ÎØ∏ÏûàÏóàÎçò ÏùºÏùÄ Î≠êÏïº? üéâ",
        "Ïò§Îäò Ï°∞Í∏à ÌûòÎì§ÏóàÎçò ÏùºÏù¥ ÏûàÏóàÎãà? ü§ó",
        "ÎÇ¥ÏùºÏùÄ Î≠ò ÌïòÍ≥† Ïã∂Ïñ¥? ‚ú®"
    ]

def get_today_question():
    today = date.today().isoformat()
    if "today_question" not in st.session_state or st.session_state.get("question_date") != today:
        questions = get_questions()
        question = random.choice(questions)
        st.session_state["today_question"] = question
        st.session_state["question_date"] = today
    return st.session_state["today_question"]

# --- 5. Î™®Îç∏ Î°úÎìú ---
@st.cache_resource(show_spinner=False)
def load_model_and_tokenizer():
    try:
        model_path = os.path.join(os.path.dirname(__file__), "best_model.pt")
        config = AutoConfig.from_pretrained("klue/bert-base", num_labels=2)
        tokenizer = AutoTokenizer.from_pretrained("klue/bert-base")
        model = AutoModelForSequenceClassification.from_pretrained("klue/bert-base", config=config)
        if os.path.exists(model_path):
            state = torch.load(model_path, map_location="cpu")
            if "state_dict" in state:
                state = state["state_dict"]
            model.load_state_dict(state, strict=False)
        model.eval()
        return tokenizer, model
    except Exception:
        return None, None

# --- 6. Í∞êÏ†ï Î∂ÑÎ•ò ---
def enhanced_emotion_classification(text: str, tokenizer, model):
    positive_keywords = ["Ï¢ãÏïÑ", "ÌñâÎ≥µ", "Í∏∞Îªê", "Ïû¨ÎØ∏", "ÏõÉ", "Í≥†ÎßàÏõå", "Ïã†ÎÇò", "Ï¶êÍ±∞", "ÏÇ¨Îûë"]
    negative_keywords = ["Ïä¨Ìçº", "Ïã´Ïñ¥", "ÌôîÎÇò", "ÏßúÏ¶ù", "ÌûòÎì§", "Ïö∏", "Î¨¥ÏÑúÏõå", "ÏïÑÌåå", "Ïô∏Î°úÏõå"]
    
    for kw in positive_keywords:
        if kw in text:
            return "Positive", 0.95, "ÌÇ§ÏõåÎìú"
    for kw in negative_keywords:
        if kw in text:
            return "Negative", 0.95, "ÌÇ§ÏõåÎìú"
    
    model_emotion, model_conf = None, 0
    if tokenizer and model:
        try:
            inputs = tokenizer(text, return_tensors="pt", truncation=True, max_length=128)
            with torch.no_grad():
                outputs = model(**inputs)
                logits = outputs.logits
                probs = F.softmax(logits, dim=1).cpu().numpy()[0]
                pred = int(probs.argmax())
                model_emotion = "Positive" if pred == 1 else "Negative"
                model_conf = float(probs[pred])
        except:
            pass
    
    api_emotion, api_conf = None, 0
    try:
        prompt = f'ÏïÑÏù¥Ïùò ÎãµÎ≥ÄÏùÑ Î∂ÑÏÑùÌï¥ÏÑú Í∞êÏ†ïÏùÑ Î∂ÑÎ•òÌï¥Ï£ºÏÑ∏Ïöî.\nÎãµÎ≥Ä: "{text}"\nÌòïÏãù: {{"emotion": "Positive" ÎòêÎäî "Negative", "confidence": 0.0~1.0}}'
        response = client.chat.completions.create(model="gpt-3.5-turbo", messages=[{"role": "user", "content": prompt}], temperature=0.1, max_tokens=50)
        result = eval(response.choices[0].message.content.strip())
        api_emotion = result.get("emotion", "Unknown")
        api_conf = float(result.get("confidence", 0))
    except:
        pass
    
    if model_emotion and api_emotion:
        if model_emotion == api_emotion:
            return model_emotion, (model_conf + api_conf) / 2, "Ï¢ÖÌï©"
        return (model_emotion if model_conf > api_conf else api_emotion, max(model_conf, api_conf), "Î™®Îç∏" if model_conf > api_conf else "API")
    elif model_emotion:
        return model_emotion, model_conf, "Î™®Îç∏"
    elif api_emotion:
        return api_emotion, api_conf, "API"
    return "Neutral", 0.5, "Í∏∞Î≥∏Í∞í"

# --- 7. RAG Í∏∞Î∞ò Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ± ---
def generate_rag_based_report(history_data):
    positive_count = sum(1 for h in history_data if h["emotion"] == "Positive")
    negative_count = len(history_data) - positive_count
    pos_ratio = (positive_count / len(history_data) * 100) if history_data else 0
    
    relevant_docs = []
    if pos_ratio >= 70:
        relevant_docs.append(EMOTION_GUIDANCE_DOCS["positive_reinforcement"])
    if negative_count > 0:
        relevant_docs.append(EMOTION_GUIDANCE_DOCS["negative_support"])
    relevant_docs.append(EMOTION_GUIDANCE_DOCS["conversation_tips"])
    
    context = "\n\n".join(relevant_docs)
    conversations = "\n".join([f"- {h['timestamp'].split()[1]}: {h['answer']} (Í∞êÏ†ï: {h['emotion']})" for h in history_data[:5]])
    
    prompt = f"""
    Îã§Ïùå Í∞ÄÏù¥ÎìúÎùºÏù∏ÏùÑ Ï∞∏Í≥†ÌïòÏó¨ Î∂ÄÎ™®ÎãòÏùÑ ÏúÑÌïú ÎßûÏ∂§Ìòï Ï°∞Ïñ∏ÏùÑ ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî:
    [Í∞ÄÏù¥ÎìúÎùºÏù∏]\n{context}
    [Ïò§ÎäòÏùò ÏïÑÏù¥ ÎåÄÌôî Í∏∞Î°ù]\n{conversations}
    [Í∞êÏ†ï Î∂ÑÏÑù Í≤∞Í≥º]\n- Í∏çÏ†ï: {positive_count}Ìöå ({pos_ratio:.0f}%)\n- Î∂ÄÏ†ï: {negative_count}Ìöå
    ÏúÑ Ï†ïÎ≥¥Î•º Î∞îÌÉïÏúºÎ°ú Î∂ÄÎ™®ÎãòÍªò Îã§Ïùå ÎÇ¥Ïö©ÏùÑ Ìè¨Ìï®Ìïú Ï°∞Ïñ∏ÏùÑ Ìï¥Ï£ºÏÑ∏Ïöî:
    1. Ïò§Îäò ÏïÑÏù¥Ïùò Í∞êÏ†ï ÏÉÅÌÉú ÏöîÏïΩ
    2. Íµ¨Ï≤¥Ï†ÅÏù∏ ÎåÄÌôî Î∞©Î≤ï 3Í∞ÄÏßÄ
    3. Ï£ºÏùòÏÇ¨Ìï≠ Î∞è Í∂åÏû•ÏÇ¨Ìï≠
    Îî∞ÎúªÌïòÍ≥† Ïã§Ïö©Ï†ÅÏù∏ Ï°∞Ïñ∏ÏúºÎ°ú ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî.
    """
    
    try:
        response = client.chat.completions.create(model="gpt-3.5-turbo", messages=[{"role": "user", "content": prompt}], temperature=0.3, max_tokens=1000)
        return response.choices[0].message.content.strip()
    except:
        return "Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§."

# --- 8. PDF Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ± (ÌïúÍ∏Ä ÏßÄÏõê) ---
def create_pdf_report(history_data, report_content):
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4, encoding='UTF-8')
    story = []
    
    # ÌïúÍ∏Ä Ìè∞Ìä∏ Í≤ΩÎ°ú ÏÑ§Ï†ï (Ï†àÎåÄ Í≤ΩÎ°úÎ°ú Î≥ÄÍ≤Ω)
    font_path = r"C:\Users\lemon\Desktop\AID\streamlit\NotoSansKR-Regular.ttf"  # Ïã§Ï†ú Í≤ΩÎ°úÎ°ú ÏàòÏ†ï
    try:
        pdfmetrics.registerFont(TTFont('NotoSansCJKkr', font_path))
    except Exception as e:
        st.error(f"Ìè∞Ìä∏ ÌååÏùºÏùÑ Î°úÎìúÌïòÏßÄ Î™ªÌñàÏäµÎãàÎã§: {e}. 'NotoSansKR-Regular' ÌååÏùºÏùÑ Í≤ΩÎ°úÏóê Ï∂îÍ∞ÄÌïòÏÑ∏Ïöî.")
        return None
    
    styles = getSampleStyleSheet()
    
    title_style = ParagraphStyle('CustomTitle', parent=styles['Heading1'], fontSize=24, textColor=colors.HexColor('#6366f1'), alignment=TA_CENTER, spaceAfter=30, fontName='NotoSansCJKkr')
    heading_style = ParagraphStyle('CustomHeading', parent=styles['Heading2'], fontSize=16, textColor=colors.HexColor('#4f46e5'), spaceAfter=12, fontName='NotoSansCJKkr')
    normal_style = ParagraphStyle('CustomNormal', parent=styles['Normal'], fontSize=11, leading=16, fontName='NotoSansCJKkr')
    
    story.append(Paragraph("Child Emotion Report", title_style))
    story.append(Paragraph(f"{date.today().strftime('%Y-%m-%d')}", normal_style))
    story.append(Spacer(1, 0.5*inch))
    
    story.append(Paragraph("Today's Summary", heading_style))
    positive_count = sum(1 for h in history_data if h["emotion"] == "Positive")
    negative_count = len(history_data) - positive_count
    total = len(history_data)
    
    summary_data = [
        ['Category', 'Value'],
        ['Total Conversations', str(total)],
        ['Positive Emotions', f"{positive_count} ({positive_count/total*100:.0f}%)"],
        ['Negative Emotions', f"{negative_count} ({negative_count/total*100:.0f}%)"]
    ]
    
    summary_table = Table(summary_data, colWidths=[3*inch, 2*inch])
    summary_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#e0e7ff')),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.HexColor('#4f46e5')),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, 0), 'NotoSansCJKkr'),
        ('FONTSIZE', (0, 0), (-1, 0), 12),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('GRID', (0, 0), (-1, -1), 1, colors.grey)
    ]))
    
    story.append(summary_table)
    story.append(Spacer(1, 0.5*inch))
    
    story.append(Paragraph("Conversation History", heading_style))
    for i, item in enumerate(history_data[:10], 1):
        time = item['timestamp'].split()[1]
        emotion = "Positive" if item["emotion"] == "Positive" else "Negative"
        confidence = item['confidence']
        conv_text = f"<b>{i}. Time:</b> {time} | <b>Emotion:</b> {emotion} ({confidence:.1%})<br/><b>Content:</b> {item['answer']}<br/><br/>"
        story.append(Paragraph(conv_text, normal_style))
    
    if report_content:
        story.append(Paragraph("AI Recommendations", heading_style))
        story.append(Paragraph(report_content, normal_style))
    
    doc.build(story)
    buffer.seek(0)
    return buffer

# --- 9. Ïù∏Ï¶ù Í¥ÄÎ¶¨ ---
def require_parent_auth():
    if not st.session_state.get("parent_authenticated", False):
        st.markdown("""
        <div class="auth-container">
            <h2 style="color: #6366f1; margin-bottom: 1rem;">üîí Î∂ÄÎ™®Îãò Ïù∏Ï¶ù</h2>
            <p style="color: #64748b; margin-bottom: 2rem;">ÏûêÎÖÄÏùò ÏÜåÏ§ëÌïú Í∞êÏ†ï Í∏∞Î°ùÏùÑ Î≥¥Ìò∏Ìï©ÎãàÎã§</p>
        </div>
        """, unsafe_allow_html=True)
        
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            code = st.text_input("Ïù∏Ï¶ù ÏΩîÎìú", type="password", placeholder="****", label_visibility="hidden")
            if st.button("ÌôïÏù∏", use_container_width=True):
                if code == PARENT_CODE:
                    st.session_state["parent_authenticated"] = True
                    st.success("‚úÖ Ïù∏Ï¶ùÎêòÏóàÏäµÎãàÎã§!")
                    st.rerun()
                else:
                    st.error("‚ùå Ïò¨Î∞îÎ•∏ ÏΩîÎìúÍ∞Ä ÏïÑÎãôÎãàÎã§")
        return False
    return True

# --- 10. ÏÇ¨Ïù¥ÎìúÎ∞î ---
def render_sidebar():
    with st.sidebar:
        st.markdown("""
        <div style="text-align: center; padding: 2rem 0;">
            <h1 style="color: white; margin: 0;">ÎßàÏùåÏù¥ üíù</h1>
            <p style="color: rgba(255,255,255,0.8); margin-top: 0.5rem;">AI Í∞êÏ†ï ÏùºÍ∏∞</p>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("---")
        mode = st.radio("ÏÇ¨Ïö©Ïûê ÏÑ†ÌÉù", ["üë∂ ÏïÑÏù¥ Î™®Îìú", "üë®‚Äçüë©‚Äçüëß Î∂ÄÎ™® Î™®Îìú"], index=0 if st.session_state.get("mode", "child") == "child" else 1, label_visibility="collapsed")
        st.session_state["mode"] = "child" if "ÏïÑÏù¥" in mode else "parent"
        
        st.markdown("---")
        with st.expander("üí° ÏÇ¨Ïö© Í∞ÄÏù¥Îìú"):
            st.markdown("**ÏïÑÏù¥ Î™®Îìú**\n- Ïò§ÎäòÏùò ÏßàÎ¨∏Ïóê ÎãµÌïòÍ∏∞\n- ÎßàÏùåÏù¥ÏôÄ ÎåÄÌôîÌïòÍ∏∞\n\n**Î∂ÄÎ™® Î™®Îìú**\n- Í∞êÏ†ï Î∂ÑÏÑù ÌôïÏù∏\n- AI Ï°∞Ïñ∏ Î∞õÍ∏∞\n- PDF Î¶¨Ìè¨Ìä∏ Îã§Ïö¥Î°úÎìú")
        
        st.markdown("""
        <div style="position: absolute; bottom: 1rem; left: 1rem; right: 1rem; text-align: center;">
            <p style="color: rgba(255,255,255,0.6); font-size: 0.8rem;">¬© 2024 ÎßàÏùåÏù¥<br>v2.0</p>
        </div>
        """, unsafe_allow_html=True)

# --- 11. ÏïÑÏù¥ Î™®Îìú ---
def render_child_mode(tokenizer, model):
    st.markdown("""
    <div class="main-header">
        <h1>ÏïàÎÖï! Ïò§ÎäòÏùÄ Ïñ¥Îñ§ ÌïòÎ£®ÏòÄÎãà? üåà</h1>
        <p>ÎßàÏùåÏù¥Í∞Ä ÎÑàÏùò Ïù¥ÏïºÍ∏∞Î•º Îì§Ïñ¥Ï§ÑÍ≤å</p>
    </div>
    """, unsafe_allow_html=True)
    
    question = get_today_question()
    
    col1, col2 = st.columns([2, 1])
    with col1:
        st.markdown('<div class="content-card">', unsafe_allow_html=True)
        st.markdown(f'<div class="question-box"><p class="question-text">{question}</p></div>', unsafe_allow_html=True)
        
        if "chat_history" not in st.session_state:
            st.session_state["chat_history"] = [{"role": "assistant", "content": f"ÏïàÎÖï! ÎÇòÎäî ÎßàÏùåÏù¥Ïïº üíù\n\n{question}"}]
        
        chat_container = st.container()
        with chat_container:
            for msg in st.session_state["chat_history"][-10:]:
                with st.chat_message(msg["role"], avatar="üíù" if msg["role"] == "assistant" else "üë∂"):
                    st.write(msg["content"])
        
        if user_input := st.chat_input("Ïù¥ÏïºÍ∏∞Î•º Îì§Î†§Ï§ò..."):
            st.session_state["chat_history"].append({"role": "user", "content": user_input})
            with st.spinner("ÎßàÏùåÏù¥Í∞Ä Îì£Í≥† ÏûàÏñ¥Ïöî..."):
                emotion, confidence, _ = enhanced_emotion_classification(user_input, tokenizer, model)
                if "child_history" not in st.session_state:
                    st.session_state["child_history"] = []
                st.session_state["child_history"].append({
                    "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M"),
                    "answer": user_input,
                    "emotion": emotion,
                    "confidence": confidence
                })
                
                messages = [{"role": "system", "content": "ÎÑàÎäî ÏïÑÏù¥Îì§Ïùò ÏπúÍµ¨ 'ÎßàÏùåÏù¥'Ïïº. ÏïÑÏù¥Ïùò Í∞êÏ†ïÏùÑ Í≥µÍ∞êÌïòÍ≥†, Í∏çÏ†ïÏ†ÅÏúºÎ°ú Î∞òÏùëÌï¥Ï§ò. ÏßßÍ≥† Îî∞ÎúªÌïòÍ≤å, Ïù¥Î™®Ìã∞ÏΩòÏùÑ ÏÇ¨Ïö©Ìï¥ÏÑú ÎåÄÎãµÌï¥Ï§ò. Ï∂îÍ∞Ä ÏßàÎ¨∏ÏúºÎ°ú ÎåÄÌôîÎ•º Ïù¥Ïñ¥Í∞ÄÎêò, Ìïú Î≤àÏóê ÌïòÎÇòÏî©Îßå Î¨ºÏñ¥Î¥ê."}, *st.session_state["chat_history"]]
                response = client.chat.completions.create(model="gpt-3.5-turbo", messages=messages, temperature=0.8, max_tokens=150)
                bot_response = response.choices[0].message.content.strip()
                st.session_state["chat_history"].append({"role": "assistant", "content": bot_response})
            st.rerun()
        
        st.markdown('</div>', unsafe_allow_html=True)

# --- 12. Î∂ÄÎ™® Î™®Îìú ---
def render_parent_mode(tokenizer, model):
    if not require_parent_auth():
        return
    
    st.markdown("""
    <div class="main-header">
        <h1>Î∂ÄÎ™®ÎãòÏùÑ ÏúÑÌïú Í∞êÏ†ï Î∂ÑÏÑù ÎåÄÏãúÎ≥¥Îìú</h1>
        <p>AIÍ∞Ä Î∂ÑÏÑùÌïú Ïö∞Î¶¨ ÏïÑÏù¥Ïùò ÎßàÏùå ÏÉÅÌÉú</p>
    </div>
    """, unsafe_allow_html=True)
    
    history = st.session_state.get("child_history", [])
    today = date.today().isoformat()
    today_data = [h for h in history if h["timestamp"].startswith(today)]
    
    if not today_data:
        st.info("üìù ÏïÑÏßÅ Ïò§ÎäòÏùò ÎåÄÌôî Í∏∞Î°ùÏù¥ ÏóÜÏäµÎãàÎã§. ÏïÑÏù¥ Î™®ÎìúÏóêÏÑú ÎåÄÌôîÎ•º ÏãúÏûëÌï¥Î≥¥ÏÑ∏Ïöî.")
        return
    
    total = len(today_data)
    positive = sum(1 for h in today_data if h["emotion"] == "Positive")
    negative = total - positive
    pos_ratio = (positive / total * 100) if total > 0 else 0
    avg_confidence = sum(h["confidence"] for h in today_data) / total
    
    col1, col2, col3, col4 = st.columns(4)
    with col1: st.markdown(f'<div class="metric-card"><div class="metric-label">Ïò§ÎäòÏùò ÎåÄÌôî</div><div class="metric-value" style="color: #6366f1;">{total}</div><div class="metric-label">Ìöå</div></div>', unsafe_allow_html=True)
    with col2: st.markdown(f'<div class="metric-card"><div class="metric-label">Í∏çÏ†ï Í∞êÏ†ï</div><div class="metric-value" style="color: #10b981;">{positive}</div><div class="metric-label">Ìöå ({pos_ratio:.0f}%)</div></div>', unsafe_allow_html=True)
    with col3: st.markdown(f'<div class="metric-card"><div class="metric-label">Î∂ÄÏ†ï Í∞êÏ†ï</div><div class="metric-value" style="color: #ef4444;">{negative}</div><div class="metric-label">Ìöå ({100-pos_ratio:.0f}%)</div></div>', unsafe_allow_html=True)
    with col4:
        mood = "üòä Ï¢ãÏùå" if pos_ratio >= 70 else "üòê Î≥¥ÌÜµ" if pos_ratio >= 40 else "üò¢ Í¥ÄÏã¨ÌïÑÏöî"
        color = "#10b981" if pos_ratio >= 70 else "#f59e0b" if pos_ratio >= 40 else "#ef4444"
        st.markdown(f'<div class="metric-card"><div class="metric-label">Ï†ÑÏ≤¥ Í∏∞Î∂Ñ</div><div class="metric-value" style="color: {color}; font-size: 1.5rem;">{mood}</div><div class="metric-label">Ïã†Î¢∞ÎèÑ {avg_confidence:.0%}</div></div>', unsafe_allow_html=True)
    
    col1, col2 = st.columns([3, 2])
    with col1:
        st.markdown('<div class="content-card">', unsafe_allow_html=True)
        st.markdown("### üìä Ïò§ÎäòÏùò Í∞êÏ†ï Î≥ÄÌôî")
        times = [datetime.strptime(h["timestamp"], "%Y-%m-%d %H:%M") for h in today_data]
        emotions = [1 if h["emotion"] == "Positive" else -1 for h in today_data]
        fig = go.Figure(go.Scatter(x=times, y=emotions, mode='markers+lines', marker=dict(size=12, color=['#10b981' if e == 1 else '#ef4444' for e in emotions]), line=dict(color='#e5e7eb', width=2), hovertemplate='%{x|%H:%M}<br>Í∞êÏ†ï: %{y}<extra></extra>'))
        fig.update_layout(xaxis_title="ÏãúÍ∞Ñ", yaxis=dict(tickvals=[-1, 0, 1], ticktext=['üò¢ Î∂ÄÏ†ï', 'üòê Ï§ëÎ¶Ω', 'üòä Í∏çÏ†ï'], range=[-1.5, 1.5]), height=300, showlegend=False, hovermode='x', plot_bgcolor='white', margin=dict(l=0, r=0, t=0, b=0))
        st.plotly_chart(fig, use_container_width=True)
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col2:
        st.markdown('<div class="content-card">', unsafe_allow_html=True)
        st.markdown("### üé® Ïò§ÎäòÏùò Í∞êÏ†ï")
        fig = go.Figure(go.Indicator(mode="gauge+number", value=pos_ratio, domain={'x': [0, 1], 'y': [0, 1]}, title={'text': "Í∏çÏ†ï ÏßÄÏàò", 'font': {'size': 16}}, gauge={'axis': {'range': [0, 100]}, 'bar': {'color': "#6366f1"}, 'bgcolor': "white", 'borderwidth': 2, 'bordercolor': "gray", 'steps': [{'range': [0, 50], 'color': '#fee2e2'}, {'range': [50, 100], 'color': '#d1fae5'}], 'threshold': {'line': {'color': "red", 'width': 4}, 'thickness': 0.75, 'value': 90}}))
        fig.update_layout(height=200, margin=dict(l=0, r=0, t=30, b=0), paper_bgcolor='rgba(0,0,0,0)', font={'color': "#4a5568"})
        st.plotly_chart(fig, use_container_width=True)
        st.metric("üòä Í∏çÏ†ï", positive)
        st.metric("üò¢ Î∂ÄÏ†ï", negative)
        st.markdown('</div>', unsafe_allow_html=True)
    
    st.markdown('<div class="content-card">', unsafe_allow_html=True)
    st.markdown("### üí¨ ÏµúÍ∑º ÎåÄÌôî")
    for item in today_data[-3:]:
        time = item['timestamp'].split()[1]
        tag_class = "tag-positive" if item['emotion'] == "Positive" else "tag-negative"
        emotion_text = "Í∏çÏ†ï" if item['emotion'] == "Positive" else "Î∂ÄÏ†ï"
        st.markdown(f'<div style="margin-bottom: 1rem;"><div style="display: flex; align-items: center; gap: 0.5rem; margin-bottom: 0.5rem;"><span style="color: #64748b; font-size: 0.9rem;">{time}</span><span class="emotion-tag {tag_class}">{emotion_text}</span></div><div style="background: #f8fafc; padding: 0.75rem; border-radius: 8px; font-size: 0.9rem;">{item["answer"][:50]}{"..." if len(item["answer"]) > 50 else ""}</div></div>', unsafe_allow_html=True)
    st.markdown('</div>', unsafe_allow_html=True)
    
    st.markdown("---")
    col1, col2, col3 = st.columns(3)
    with col1: 
        if st.button("ü§ñ AI ÎåÄÌôî Í∞ÄÏù¥Îìú", use_container_width=True):
            with st.spinner("AIÍ∞Ä Î∂ÑÏÑù Ï§ëÏûÖÎãàÎã§..."): st.session_state["ai_report"] = generate_rag_based_report(today_data)
    with col2:
        if st.button("üìÑ PDF Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±", use_container_width=True):
            report_content = st.session_state.get("ai_report", generate_rag_based_report(today_data))
            pdf_buffer = create_pdf_report(today_data, report_content)
            st.download_button(label="üì• Îã§Ïö¥Î°úÎìú", data=pdf_buffer, file_name=f"emotion_report_{date.today().strftime('%Y%m%d')}.pdf", mime="application/pdf", use_container_width=True)
    with col3: 
        if st.button("üîÑ ÏÉàÎ°úÍ≥†Ïπ®", use_container_width=True): st.rerun()
    
    if st.session_state.get("ai_report"):
        st.markdown('<div class="content-card">', unsafe_allow_html=True)
        st.markdown("### üåü AI ÎßûÏ∂§ Ï°∞Ïñ∏")
        st.write(st.session_state["ai_report"])
        st.markdown('</div>', unsafe_allow_html=True)

# --- 13. Î©îÏù∏ Ìï®Ïàò ---
def main():
    if "mode" not in st.session_state:
        st.session_state["mode"] = "child"
    
    with st.spinner("AIÎ•º Ï§ÄÎπÑÌïòÍ≥† ÏûàÏñ¥Ïöî..."):
        tokenizer, model = load_model_and_tokenizer()
    
    render_sidebar()
    if st.session_state["mode"] == "child":
        render_child_mode(tokenizer, model)
    else:
        render_parent_mode(tokenizer, model)

if __name__ == "__main__":
    main()